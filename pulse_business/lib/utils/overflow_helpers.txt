// 🚀 FLUTTER OVERFLOW PREVENTION CHEAT SHEET
// Copy this to your project as overflow_helpers.dart

// ========================================
// 1. TEXT OVERFLOW FIXES
// ========================================

// ❌ CAUSES OVERFLOW
Text('Very long text that might overflow the container width')

// ✅ PREVENTS OVERFLOW
Text(
  'Very long text that might overflow the container width',
  overflow: TextOverflow.ellipsis,  // Shows "..." when text is too long
  maxLines: 1,                      // Limits to 1 line
)

// ✅ MULTI-LINE TEXT
Text(
  'Long text that can wrap to multiple lines but is limited',
  overflow: TextOverflow.ellipsis,
  maxLines: 2,                      // Allows 2 lines, then "..."
)

// ✅ FADE OVERFLOW (alternative to ellipsis)
Text(
  'Text that fades out when too long',
  overflow: TextOverflow.fade,
  maxLines: 1,
)

// ========================================
// 2. ROW OVERFLOW FIXES
// ========================================

// ❌ CAUSES OVERFLOW
Row(
  children: [
    Container(width: 200),
    Container(width: 200),
    Container(width: 200),  // Total width exceeds screen
  ],
)

// ✅ FLEXIBLE LAYOUT
Row(
  children: [
    Expanded(child: Container()),     // Takes available space
    Expanded(child: Container()),     // Takes available space
    Expanded(child: Container()),     // Takes available space
  ],
)

// ✅ MIXED FLEXIBLE/FIXED
Row(
  children: [
    Expanded(child: Text('Flexible text that can shrink')),
    Icon(Icons.star),                 // Fixed width
    SizedBox(width: 8),              // Fixed spacing
    Text('Fixed'),                    // Fixed width text
  ],
)

// ✅ FLEX VALUES (for different proportions)
Row(
  children: [
    Expanded(flex: 2, child: Text('Takes 2/3 of space')),
    Expanded(flex: 1, child: Text('Takes 1/3 of space')),
  ],
)

// ========================================
// 3. COLUMN OVERFLOW FIXES
// ========================================

// ❌ CAUSES OVERFLOW
Column(
  children: [
    Text('Header'),
    ListView(children: [...]),        // Infinite height in Column
  ],
)

// ✅ PREVENTS OVERFLOW
Column(
  children: [
    Text('Header'),                   // Fixed height
    Expanded(
      child: ListView(children: [...]), // Takes remaining space
    ),
  ],
)

// ✅ MULTIPLE SCROLLABLE SECTIONS
Column(
  children: [
    Text('Header'),
    Expanded(
      flex: 2,
      child: ListView(children: [...]), // Takes 2/3 of remaining space
    ),
    Divider(),
    Expanded(
      flex: 1,
      child: ListView(children: [...]), // Takes 1/3 of remaining space
    ),
  ],
)

// ========================================
// 4. SCROLLVIEW OVERFLOW FIXES
// ========================================

// ❌ CAUSES HORIZONTAL OVERFLOW
Row(
  children: [
    Container(width: 100),
    Container(width: 100),
    Container(width: 100),
    Container(width: 100),            // Too many for screen width
  ],
)

// ✅ HORIZONTAL SCROLLING
SingleChildScrollView(
  scrollDirection: Axis.horizontal,
  child: Row(
    children: [
      Container(width: 100),
      Container(width: 100),
      Container(width: 100),
      Container(width: 100),          // Now scrollable
    ],
  ),
)

// ✅ VERTICAL SCROLLING (for long content)
SingleChildScrollView(
  child: Column(
    children: [
      // Long list of widgets that might exceed screen height
      ...List.generate(50, (index) => ListTile(title: Text('Item $index'))),
    ],
  ),
)

// ========================================
// 5. CONTAINER & CARD OVERFLOW FIXES
// ========================================

// ❌ FIXED SIZES THAT MIGHT OVERFLOW
Container(
  width: 300,                         // Might be too wide
  child: Text('Long text'),
)

// ✅ RESPONSIVE CONTAINERS
Container(
  constraints: BoxConstraints(
    maxWidth: 300,                    // Maximum width
    minWidth: 100,                    // Minimum width
  ),
  child: Text('Responsive text'),
)

// ✅ SCREEN-RELATIVE SIZING
Container(
  width: MediaQuery.of(context).size.width * 0.8, // 80% of screen width
  child: Text('Screen-relative size'),
)

// ========================================
// 6. GRID OVERFLOW FIXES
// ========================================

// ✅ RESPONSIVE GRID
GridView.builder(
  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
    crossAxisCount: 2,
    childAspectRatio: 0.8,            // Width/Height ratio
    crossAxisSpacing: 8,              // Space between columns
    mainAxisSpacing: 8,               // Space between rows
  ),
  itemBuilder: (context, index) => Card(
    child: Padding(
      padding: EdgeInsets.all(8),
      child: Column(
        children: [
          Expanded(                   // Flexible content
            child: Text('Item $index', overflow: TextOverflow.ellipsis),
          ),
        ],
      ),
    ),
  ),
)

// ========================================
// 7. COMMON OVERFLOW PATTERNS
// ========================================

// ✅ SAFE LIST TILE
ListTile(
  leading: Icon(Icons.star),
  title: Text(
    'Long title that might overflow',
    overflow: TextOverflow.ellipsis,
    maxLines: 1,
  ),
  subtitle: Text(
    'Long subtitle that might also overflow and needs handling',
    overflow: TextOverflow.ellipsis,
    maxLines: 2,
  ),
  trailing: Icon(Icons.arrow_forward),
)

// ✅ SAFE CARD CONTENT
Card(
  child: Padding(
    padding: EdgeInsets.all(16),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Card Title',
          style: TextStyle(fontWeight: FontWeight.bold),
          overflow: TextOverflow.ellipsis,
          maxLines: 1,
        ),
        SizedBox(height: 8),
        Expanded(                     // Takes available space
          child: Text(
            'Card content that can be very long and needs to be handled properly',
            overflow: TextOverflow.ellipsis,
            maxLines: 3,
          ),
        ),
        SizedBox(height: 8),
        Row(
          children: [
            Expanded(child: ElevatedButton(onPressed: () {}, child: Text('Action'))),
            SizedBox(width: 8),
            Expanded(child: OutlinedButton(onPressed: () {}, child: Text('Cancel'))),
          ],
        ),
      ],
    ),
  ),
)

// ✅ SAFE APP BAR TITLE
AppBar(
  title: Text(
    'Very Long App Bar Title That Might Overflow',
    overflow: TextOverflow.ellipsis,
    maxLines: 1,
  ),
  actions: [
    IconButton(icon: Icon(Icons.search), onPressed: () {}),
    IconButton(icon: Icon(Icons.more_vert), onPressed: () {}),
  ],
)

// ========================================
// 8. DEBUGGING OVERFLOW
// ========================================

// ✅ ADD VISUAL DEBUGGING (temporary)
Container(
  decoration: BoxDecoration(
    border: Border.all(color: Colors.red), // Visual boundary
  ),
  child: Text('Debug this widget'),
)

// ✅ FLUTTER INSPECTOR TIPS
// 1. Use Flutter Inspector in your IDE
// 2. Look for yellow/black overflow warnings
// 3. Check widget tree for Flex/RenderFlex errors
// 4. Add borders temporarily to see widget boundaries

// ========================================
// 9. RESPONSIVE DESIGN HELPERS
// ========================================

// ✅ SCREEN SIZE HELPERS
class ScreenUtils {
  static bool isSmallScreen(BuildContext context) {
    return MediaQuery.of(context).size.width < 600;
  }
  
  static bool isTablet(BuildContext context) {
    return MediaQuery.of(context).size.width >= 600 && 
           MediaQuery.of(context).size.width < 1024;
  }
  
  static bool isDesktop(BuildContext context) {
    return MediaQuery.of(context).size.width >= 1024;
  }
}

// ✅ RESPONSIVE GRID COLUMNS
int getGridColumns(BuildContext context) {
  final width = MediaQuery.of(context).size.width;
  if (width < 600) return 2;      // Mobile: 2 columns
  if (width < 1024) return 3;     // Tablet: 3 columns
  return 4;                       // Desktop: 4 columns
}

// ========================================
// 10. QUICK FIXES CHECKLIST
// ========================================

/*
✅ OVERFLOW PREVENTION CHECKLIST:

□ Add overflow: TextOverflow.ellipsis to all Text widgets
□ Add maxLines to Text widgets  
□ Use Expanded in Row/Column for flexible children
□ Use SingleChildScrollView for scrollable content
□ Use Flexible for widgets that can shrink
□ Add constraints to Containers when needed
□ Test on different screen sizes
□ Use MediaQuery for responsive design
□ Wrap long content in scrollable widgets
□ Use proper spacing (SizedBox, Padding)

COMMON OVERFLOW ERRORS:
- "RenderFlex overflowed by X pixels on the right"
- "RenderFlex overflowed by X pixels on the bottom"  
- Text getting cut off
- Widgets disappearing off screen
- Yellow/black overflow warnings

QUICK DEBUG:
1. Add border to see widget boundaries
2. Use Flutter Inspector
3. Check for missing Expanded/Flexible
4. Check text overflow settings
5. Verify container constraints
*/